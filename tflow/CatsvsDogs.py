# -*- coding: utf-8 -*-
"""Cats Vs Dogs tfds

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xHa0WdCO3AuzTLamyPS5bwYKJ9XN8gne
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np

train_data, test_data = tfds.load("cats_vs_dogs", as_supervised=True, split=['train[:75%]', 'train[75%:]'])

"""train_df = train_df.map(
    lambda image, label: (tf.image.resize(image, (150, 150)), label)).batch(64)

test_df = test_df.map(
    lambda image, label: (tf.image.resize(image, (150, 150)), label)).batch(64)"""

class myCallBack(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.995):
      print('\n Reached 99% accuracy so stopping')
      self.model.stop_training=True

IMAGE_SIZE = 300
def pre_process_image(image, label):
  image = tf.cast(image, tf.float32)
  image = image / 255.0
  image = tf.image.resize(image, (IMAGE_SIZE, IMAGE_SIZE))
  return image, label

BATCH_SIZE = 64
SHUFFLE_BUFFER_SIZE = 1000
train_df = train_data.map(pre_process_image).shuffle(SHUFFLE_BUFFER_SIZE).repeat().batch(BATCH_SIZE)
test_df = test_data.map(pre_process_image).repeat().batch(BATCH_SIZE)

temp_data = []
for data in train_data:
  temp_data.append(data[0].numpy())

temp_data_np = np.asarray(temp_data)

total_images = temp_data_np.shape
print(total_images)

#Not Working in cats_vs_dogs
"""image_arr=[]
image_label=[]
for image, label in train_df:
  image_arr.append(image.numpy())
  image_label.append(label.numpy())

image_arr_np = np.asarray(image_arr)
image_label_np = np.asarray(image_label)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255, 
                                   height_shift_range=0.4,
                                   width_shift_range=0.4,
                                   zoom_range=0.2)

train_datagen.fit(image_arr_np)"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(IMAGE_SIZE,IMAGE_SIZE,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
callbacks = myCallBack()
model.compile(metrics=['accuracy'],loss='binary_crossentropy', optimizer='adam')
history = model.fit(train_df, epochs=1, steps_per_epoch=17446/BATCH_SIZE, validation_data=test_df, validation_steps=5816/BATCH_SIZE, callbacks=[callbacks])

model.save('D:/Downloads/model.h5')
#model = tf.keras.models.load_model('D:/Downloads/model.h5')

"""accuracy = history.history['accuracy']
val_accuracy = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
import matplotlib.pyplot as plt
epochs = range(len(accuracy))

plt.plot(epochs, accuracy, 'r')
plt.plot(epochs, val_accuracy, 'b')

plt.plot(epochs, loss, 'r')
plt.plot(epochs, val_loss, 'b')"""

